
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model categories
 * 
 */
export type categories = {
  id: number
  name: string
  created_at: Date | null
}

/**
 * Model products
 * 
 */
export type products = {
  id: number
  korean_name: string
  english_name: string | null
  category_id: number
  created_at: Date | null
}

/**
 * Model product_images
 * 
 */
export type product_images = {
  id: number
  image_url: string
  product_id: number
  created_at: Date | null
}

/**
 * Model allergies
 * 
 */
export type allergies = {
  id: number
  name: string
  created_at: Date | null
}

/**
 * Model products_allergies
 * 
 */
export type products_allergies = {
  id: number
  product_id: number
  allergy_id: number
  created_at: Date | null
}

/**
 * Model nutritions
 * 
 */
export type nutritions = {
  id: number
  product_id: number
  caffein: number
  fat: number
  sugar: number
  sodium: number
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  username: string | null
  email: string
  password: string
  address: string | null
  phone_number: string | null
  policy_agreed: boolean
  created_at: Date | null
  updated_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categories.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categories.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<GlobalReject>;

  /**
   * `prisma.product_images`: Exposes CRUD operations for the **product_images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_images
    * const product_images = await prisma.product_images.findMany()
    * ```
    */
  get product_images(): Prisma.product_imagesDelegate<GlobalReject>;

  /**
   * `prisma.allergies`: Exposes CRUD operations for the **allergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergies.findMany()
    * ```
    */
  get allergies(): Prisma.allergiesDelegate<GlobalReject>;

  /**
   * `prisma.products_allergies`: Exposes CRUD operations for the **products_allergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products_allergies
    * const products_allergies = await prisma.products_allergies.findMany()
    * ```
    */
  get products_allergies(): Prisma.products_allergiesDelegate<GlobalReject>;

  /**
   * `prisma.nutritions`: Exposes CRUD operations for the **nutritions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nutritions
    * const nutritions = await prisma.nutritions.findMany()
    * ```
    */
  get nutritions(): Prisma.nutritionsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    categories: 'categories',
    products: 'products',
    product_images: 'product_images',
    allergies: 'allergies',
    products_allergies: 'products_allergies',
    nutritions: 'nutritions',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */


  export type CategoriesCountOutputType = {
    products: number
  }

  export type CategoriesCountOutputTypeSelect = {
    products?: boolean
  }

  export type CategoriesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoriesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoriesCountOutputType
    : S extends undefined
    ? never
    : S extends CategoriesCountOutputTypeArgs
    ?'include' extends U
    ? CategoriesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoriesCountOutputType ? CategoriesCountOutputType[P] : never
  } 
    : CategoriesCountOutputType
  : CategoriesCountOutputType




  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     * 
    **/
    select?: CategoriesCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    products_allergies: number
    product_images: number
    nutritions: number
  }

  export type ProductsCountOutputTypeSelect = {
    products_allergies?: boolean
    product_images?: boolean
    nutritions?: boolean
  }

  export type ProductsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductsCountOutputType
    : S extends undefined
    ? never
    : S extends ProductsCountOutputTypeArgs
    ?'include' extends U
    ? ProductsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductsCountOutputType ? ProductsCountOutputType[P] : never
  } 
    : ProductsCountOutputType
  : ProductsCountOutputType




  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     * 
    **/
    select?: ProductsCountOutputTypeSelect | null
  }



  /**
   * Count Type AllergiesCountOutputType
   */


  export type AllergiesCountOutputType = {
    product_allergies: number
  }

  export type AllergiesCountOutputTypeSelect = {
    product_allergies?: boolean
  }

  export type AllergiesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AllergiesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AllergiesCountOutputType
    : S extends undefined
    ? never
    : S extends AllergiesCountOutputTypeArgs
    ?'include' extends U
    ? AllergiesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AllergiesCountOutputType ? AllergiesCountOutputType[P] : never
  } 
    : AllergiesCountOutputType
  : AllergiesCountOutputType




  // Custom InputTypes

  /**
   * AllergiesCountOutputType without action
   */
  export type AllergiesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AllergiesCountOutputType
     * 
    **/
    select?: AllergiesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type CategoriesAggregateArgs = {
    /**
     * Filter which categories to aggregate.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs = {
    where?: categoriesWhereInput
    orderBy?: Enumerable<categoriesOrderByWithAggregationInput>
    by: Array<CategoriesScalarFieldEnum>
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    created_at: Date | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    products?: boolean | productsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type categoriesInclude = {
    products?: boolean | productsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type categoriesGetPayload<
    S extends boolean | null | undefined | categoriesArgs,
    U = keyof S
      > = S extends true
        ? categories
    : S extends undefined
    ? never
    : S extends categoriesArgs | categoriesFindManyArgs
    ?'include' extends U
    ? categories  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? Array < productsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? Array < productsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof categories ? categories[P] : never
  } 
    : categories
  : categories


  type categoriesCountArgs = Merge<
    Omit<categoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }
  >

  export interface categoriesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categories'> extends True ? CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>> : CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs>(
      args?: SelectSubset<T, categoriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<categories>>, PrismaPromise<Array<categoriesGetPayload<T>>>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs>(
      args: SelectSubset<T, categoriesCreateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs>(
      args?: SelectSubset<T, categoriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs>(
      args: SelectSubset<T, categoriesDeleteArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs>(
      args: SelectSubset<T, categoriesUpdateArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs>(
      args?: SelectSubset<T, categoriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs>(
      args: SelectSubset<T, categoriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs>(
      args: SelectSubset<T, categoriesUpsertArgs>
    ): CheckSelect<T, Prisma__categoriesClient<categories>, Prisma__categoriesClient<categoriesGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends productsFindManyArgs = {}>(args?: Subset<T, productsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<products>>, PrismaPromise<Array<productsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Throw an Error if a categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     * 
    **/
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     * 
    **/
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to create a categories.
     * 
    **/
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs = {
    /**
     * The data used to create many categories.
     * 
    **/
    data: Enumerable<categoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The data needed to update a categories.
     * 
    **/
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs = {
    /**
     * The data used to update categories.
     * 
    **/
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     * 
    **/
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * The filter to search for the categories to update in case it exists.
     * 
    **/
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     * 
    **/
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
    /**
     * Filter which categories to delete.
     * 
    **/
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs = {
    /**
     * Filter which categories to delete
     * 
    **/
    where?: categoriesWhereInput
  }


  /**
   * categories without action
   */
  export type categoriesArgs = {
    /**
     * Select specific fields to fetch from the categories
     * 
    **/
    select?: categoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoriesInclude | null
  }



  /**
   * Model products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    korean_name: number
    english_name: number
    category_id: number
    created_at: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which products to aggregate.
     * 
    **/
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: productsWhereInput
    orderBy?: Enumerable<productsOrderByWithAggregationInput>
    by: Array<ProductsScalarFieldEnum>
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: number
    korean_name: string
    english_name: string | null
    category_id: number
    created_at: Date | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect = {
    id?: boolean
    korean_name?: boolean
    english_name?: boolean
    category_id?: boolean
    created_at?: boolean
    category?: boolean | categoriesArgs
    products_allergies?: boolean | products_allergiesFindManyArgs
    product_images?: boolean | product_imagesFindManyArgs
    nutritions?: boolean | nutritionsFindManyArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type productsInclude = {
    category?: boolean | categoriesArgs
    products_allergies?: boolean | products_allergiesFindManyArgs
    product_images?: boolean | product_imagesFindManyArgs
    nutritions?: boolean | nutritionsFindManyArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type productsGetPayload<
    S extends boolean | null | undefined | productsArgs,
    U = keyof S
      > = S extends true
        ? products
    : S extends undefined
    ? never
    : S extends productsArgs | productsFindManyArgs
    ?'include' extends U
    ? products  & {
    [P in TrueKeys<S['include']>]:
        P extends 'category' ? categoriesGetPayload<S['include'][P]> :
        P extends 'products_allergies' ? Array < products_allergiesGetPayload<S['include'][P]>>  :
        P extends 'product_images' ? Array < product_imagesGetPayload<S['include'][P]>>  :
        P extends 'nutritions' ? Array < nutritionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'category' ? categoriesGetPayload<S['select'][P]> :
        P extends 'products_allergies' ? Array < products_allergiesGetPayload<S['select'][P]>>  :
        P extends 'product_images' ? Array < product_imagesGetPayload<S['select'][P]>>  :
        P extends 'nutritions' ? Array < nutritionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof products ? products[P] : never
  } 
    : products
  : products


  type productsCountArgs = Merge<
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }
  >

  export interface productsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'products'> extends True ? CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>> : CheckSelect<T, Prisma__productsClient<products | null >, Prisma__productsClient<productsGetPayload<T> | null >>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'products'> extends True ? CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>> : CheckSelect<T, Prisma__productsClient<products | null >, Prisma__productsClient<productsGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs>(
      args?: SelectSubset<T, productsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<products>>, PrismaPromise<Array<productsGetPayload<T>>>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs>(
      args: SelectSubset<T, productsCreateArgs>
    ): CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs>(
      args?: SelectSubset<T, productsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs>(
      args: SelectSubset<T, productsDeleteArgs>
    ): CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs>(
      args: SelectSubset<T, productsUpdateArgs>
    ): CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs>(
      args?: SelectSubset<T, productsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs>(
      args: SelectSubset<T, productsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs>(
      args: SelectSubset<T, productsUpsertArgs>
    ): CheckSelect<T, Prisma__productsClient<products>, Prisma__productsClient<productsGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends categoriesArgs = {}>(args?: Subset<T, categoriesArgs>): CheckSelect<T, Prisma__categoriesClient<categories | null >, Prisma__categoriesClient<categoriesGetPayload<T> | null >>;

    products_allergies<T extends products_allergiesFindManyArgs = {}>(args?: Subset<T, products_allergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<products_allergies>>, PrismaPromise<Array<products_allergiesGetPayload<T>>>>;

    product_images<T extends product_imagesFindManyArgs = {}>(args?: Subset<T, product_imagesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<product_images>>, PrismaPromise<Array<product_imagesGetPayload<T>>>>;

    nutritions<T extends nutritionsFindManyArgs = {}>(args?: Subset<T, nutritionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<nutritions>>, PrismaPromise<Array<nutritionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * products findUnique
   */
  export type productsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * Throw an Error if a products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which products to fetch.
     * 
    **/
    where: productsWhereUniqueInput
  }


  /**
   * products findFirst
   */
  export type productsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * Throw an Error if a products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which products to fetch.
     * 
    **/
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     * 
    **/
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     * 
    **/
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * Filter, which products to fetch.
     * 
    **/
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     * 
    **/
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * products create
   */
  export type productsCreateArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * The data needed to create a products.
     * 
    **/
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs = {
    /**
     * The data used to create many products.
     * 
    **/
    data: Enumerable<productsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * products update
   */
  export type productsUpdateArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * The data needed to update a products.
     * 
    **/
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     * 
    **/
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs = {
    /**
     * The data used to update products.
     * 
    **/
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     * 
    **/
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * The filter to search for the products to update in case it exists.
     * 
    **/
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     * 
    **/
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
    /**
     * Filter which products to delete.
     * 
    **/
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs = {
    /**
     * Filter which products to delete
     * 
    **/
    where?: productsWhereInput
  }


  /**
   * products without action
   */
  export type productsArgs = {
    /**
     * Select specific fields to fetch from the products
     * 
    **/
    select?: productsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productsInclude | null
  }



  /**
   * Model product_images
   */


  export type AggregateProduct_images = {
    _count: Product_imagesCountAggregateOutputType | null
    _avg: Product_imagesAvgAggregateOutputType | null
    _sum: Product_imagesSumAggregateOutputType | null
    _min: Product_imagesMinAggregateOutputType | null
    _max: Product_imagesMaxAggregateOutputType | null
  }

  export type Product_imagesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_imagesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_imagesMinAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type Product_imagesMaxAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type Product_imagesCountAggregateOutputType = {
    id: number
    image_url: number
    product_id: number
    created_at: number
    _all: number
  }


  export type Product_imagesAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_imagesSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_imagesMinAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type Product_imagesMaxAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type Product_imagesCountAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type Product_imagesAggregateArgs = {
    /**
     * Filter which product_images to aggregate.
     * 
    **/
    where?: product_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<product_imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: product_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_images
    **/
    _count?: true | Product_imagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_imagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_imagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_imagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_imagesMaxAggregateInputType
  }

  export type GetProduct_imagesAggregateType<T extends Product_imagesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_images]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_images[P]>
      : GetScalarType<T[P], AggregateProduct_images[P]>
  }




  export type Product_imagesGroupByArgs = {
    where?: product_imagesWhereInput
    orderBy?: Enumerable<product_imagesOrderByWithAggregationInput>
    by: Array<Product_imagesScalarFieldEnum>
    having?: product_imagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_imagesCountAggregateInputType | true
    _avg?: Product_imagesAvgAggregateInputType
    _sum?: Product_imagesSumAggregateInputType
    _min?: Product_imagesMinAggregateInputType
    _max?: Product_imagesMaxAggregateInputType
  }


  export type Product_imagesGroupByOutputType = {
    id: number
    image_url: string
    product_id: number
    created_at: Date | null
    _count: Product_imagesCountAggregateOutputType | null
    _avg: Product_imagesAvgAggregateOutputType | null
    _sum: Product_imagesSumAggregateOutputType | null
    _min: Product_imagesMinAggregateOutputType | null
    _max: Product_imagesMaxAggregateOutputType | null
  }

  type GetProduct_imagesGroupByPayload<T extends Product_imagesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Product_imagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_imagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_imagesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_imagesGroupByOutputType[P]>
        }
      >
    >


  export type product_imagesSelect = {
    id?: boolean
    image_url?: boolean
    product_id?: boolean
    created_at?: boolean
    product?: boolean | productsArgs
  }

  export type product_imagesInclude = {
    product?: boolean | productsArgs
  }

  export type product_imagesGetPayload<
    S extends boolean | null | undefined | product_imagesArgs,
    U = keyof S
      > = S extends true
        ? product_images
    : S extends undefined
    ? never
    : S extends product_imagesArgs | product_imagesFindManyArgs
    ?'include' extends U
    ? product_images  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? productsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? productsGetPayload<S['select'][P]> :  P extends keyof product_images ? product_images[P] : never
  } 
    : product_images
  : product_images


  type product_imagesCountArgs = Merge<
    Omit<product_imagesFindManyArgs, 'select' | 'include'> & {
      select?: Product_imagesCountAggregateInputType | true
    }
  >

  export interface product_imagesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product_images that matches the filter.
     * @param {product_imagesFindUniqueArgs} args - Arguments to find a Product_images
     * @example
     * // Get one Product_images
     * const product_images = await prisma.product_images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_imagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_imagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_images'> extends True ? CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>> : CheckSelect<T, Prisma__product_imagesClient<product_images | null >, Prisma__product_imagesClient<product_imagesGetPayload<T> | null >>

    /**
     * Find the first Product_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imagesFindFirstArgs} args - Arguments to find a Product_images
     * @example
     * // Get one Product_images
     * const product_images = await prisma.product_images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_imagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_imagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_images'> extends True ? CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>> : CheckSelect<T, Prisma__product_imagesClient<product_images | null >, Prisma__product_imagesClient<product_imagesGetPayload<T> | null >>

    /**
     * Find zero or more Product_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_images
     * const product_images = await prisma.product_images.findMany()
     * 
     * // Get first 10 Product_images
     * const product_images = await prisma.product_images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_imagesWithIdOnly = await prisma.product_images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_imagesFindManyArgs>(
      args?: SelectSubset<T, product_imagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product_images>>, PrismaPromise<Array<product_imagesGetPayload<T>>>>

    /**
     * Create a Product_images.
     * @param {product_imagesCreateArgs} args - Arguments to create a Product_images.
     * @example
     * // Create one Product_images
     * const Product_images = await prisma.product_images.create({
     *   data: {
     *     // ... data to create a Product_images
     *   }
     * })
     * 
    **/
    create<T extends product_imagesCreateArgs>(
      args: SelectSubset<T, product_imagesCreateArgs>
    ): CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>>

    /**
     * Create many Product_images.
     *     @param {product_imagesCreateManyArgs} args - Arguments to create many Product_images.
     *     @example
     *     // Create many Product_images
     *     const product_images = await prisma.product_images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_imagesCreateManyArgs>(
      args?: SelectSubset<T, product_imagesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product_images.
     * @param {product_imagesDeleteArgs} args - Arguments to delete one Product_images.
     * @example
     * // Delete one Product_images
     * const Product_images = await prisma.product_images.delete({
     *   where: {
     *     // ... filter to delete one Product_images
     *   }
     * })
     * 
    **/
    delete<T extends product_imagesDeleteArgs>(
      args: SelectSubset<T, product_imagesDeleteArgs>
    ): CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>>

    /**
     * Update one Product_images.
     * @param {product_imagesUpdateArgs} args - Arguments to update one Product_images.
     * @example
     * // Update one Product_images
     * const product_images = await prisma.product_images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_imagesUpdateArgs>(
      args: SelectSubset<T, product_imagesUpdateArgs>
    ): CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>>

    /**
     * Delete zero or more Product_images.
     * @param {product_imagesDeleteManyArgs} args - Arguments to filter Product_images to delete.
     * @example
     * // Delete a few Product_images
     * const { count } = await prisma.product_images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_imagesDeleteManyArgs>(
      args?: SelectSubset<T, product_imagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_images
     * const product_images = await prisma.product_images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_imagesUpdateManyArgs>(
      args: SelectSubset<T, product_imagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_images.
     * @param {product_imagesUpsertArgs} args - Arguments to update or create a Product_images.
     * @example
     * // Update or create a Product_images
     * const product_images = await prisma.product_images.upsert({
     *   create: {
     *     // ... data to create a Product_images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_images we want to update
     *   }
     * })
    **/
    upsert<T extends product_imagesUpsertArgs>(
      args: SelectSubset<T, product_imagesUpsertArgs>
    ): CheckSelect<T, Prisma__product_imagesClient<product_images>, Prisma__product_imagesClient<product_imagesGetPayload<T>>>

    /**
     * Count the number of Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_imagesCountArgs} args - Arguments to filter Product_images to count.
     * @example
     * // Count the number of Product_images
     * const count = await prisma.product_images.count({
     *   where: {
     *     // ... the filter for the Product_images we want to count
     *   }
     * })
    **/
    count<T extends product_imagesCountArgs>(
      args?: Subset<T, product_imagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_imagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_imagesAggregateArgs>(args: Subset<T, Product_imagesAggregateArgs>): PrismaPromise<GetProduct_imagesAggregateType<T>>

    /**
     * Group by Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_imagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_imagesGroupByArgs['orderBy'] }
        : { orderBy?: Product_imagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_imagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_imagesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_imagesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productsArgs = {}>(args?: Subset<T, productsArgs>): CheckSelect<T, Prisma__productsClient<products | null >, Prisma__productsClient<productsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * product_images findUnique
   */
  export type product_imagesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * Throw an Error if a product_images can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product_images to fetch.
     * 
    **/
    where: product_imagesWhereUniqueInput
  }


  /**
   * product_images findFirst
   */
  export type product_imagesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * Throw an Error if a product_images can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product_images to fetch.
     * 
    **/
    where?: product_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<product_imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_images.
     * 
    **/
    cursor?: product_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_images.
     * 
    **/
    distinct?: Enumerable<Product_imagesScalarFieldEnum>
  }


  /**
   * product_images findMany
   */
  export type product_imagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * Filter, which product_images to fetch.
     * 
    **/
    where?: product_imagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<product_imagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_images.
     * 
    **/
    cursor?: product_imagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Product_imagesScalarFieldEnum>
  }


  /**
   * product_images create
   */
  export type product_imagesCreateArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * The data needed to create a product_images.
     * 
    **/
    data: XOR<product_imagesCreateInput, product_imagesUncheckedCreateInput>
  }


  /**
   * product_images createMany
   */
  export type product_imagesCreateManyArgs = {
    /**
     * The data used to create many product_images.
     * 
    **/
    data: Enumerable<product_imagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_images update
   */
  export type product_imagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * The data needed to update a product_images.
     * 
    **/
    data: XOR<product_imagesUpdateInput, product_imagesUncheckedUpdateInput>
    /**
     * Choose, which product_images to update.
     * 
    **/
    where: product_imagesWhereUniqueInput
  }


  /**
   * product_images updateMany
   */
  export type product_imagesUpdateManyArgs = {
    /**
     * The data used to update product_images.
     * 
    **/
    data: XOR<product_imagesUpdateManyMutationInput, product_imagesUncheckedUpdateManyInput>
    /**
     * Filter which product_images to update
     * 
    **/
    where?: product_imagesWhereInput
  }


  /**
   * product_images upsert
   */
  export type product_imagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * The filter to search for the product_images to update in case it exists.
     * 
    **/
    where: product_imagesWhereUniqueInput
    /**
     * In case the product_images found by the `where` argument doesn't exist, create a new product_images with this data.
     * 
    **/
    create: XOR<product_imagesCreateInput, product_imagesUncheckedCreateInput>
    /**
     * In case the product_images was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<product_imagesUpdateInput, product_imagesUncheckedUpdateInput>
  }


  /**
   * product_images delete
   */
  export type product_imagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
    /**
     * Filter which product_images to delete.
     * 
    **/
    where: product_imagesWhereUniqueInput
  }


  /**
   * product_images deleteMany
   */
  export type product_imagesDeleteManyArgs = {
    /**
     * Filter which product_images to delete
     * 
    **/
    where?: product_imagesWhereInput
  }


  /**
   * product_images without action
   */
  export type product_imagesArgs = {
    /**
     * Select specific fields to fetch from the product_images
     * 
    **/
    select?: product_imagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_imagesInclude | null
  }



  /**
   * Model allergies
   */


  export type AggregateAllergies = {
    _count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
  }

  export type AllergiesAvgAggregateOutputType = {
    id: number | null
  }

  export type AllergiesSumAggregateOutputType = {
    id: number | null
  }

  export type AllergiesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergiesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type AllergiesAvgAggregateInputType = {
    id?: true
  }

  export type AllergiesSumAggregateInputType = {
    id?: true
  }

  export type AllergiesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergiesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergiesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type AllergiesAggregateArgs = {
    /**
     * Filter which allergies to aggregate.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned allergies
    **/
    _count?: true | AllergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergiesMaxAggregateInputType
  }

  export type GetAllergiesAggregateType<T extends AllergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergies[P]>
      : GetScalarType<T[P], AggregateAllergies[P]>
  }




  export type AllergiesGroupByArgs = {
    where?: allergiesWhereInput
    orderBy?: Enumerable<allergiesOrderByWithAggregationInput>
    by: Array<AllergiesScalarFieldEnum>
    having?: allergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergiesCountAggregateInputType | true
    _avg?: AllergiesAvgAggregateInputType
    _sum?: AllergiesSumAggregateInputType
    _min?: AllergiesMinAggregateInputType
    _max?: AllergiesMaxAggregateInputType
  }


  export type AllergiesGroupByOutputType = {
    id: number
    name: string
    created_at: Date | null
    _count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
  }

  type GetAllergiesGroupByPayload<T extends AllergiesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AllergiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
            : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
        }
      >
    >


  export type allergiesSelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    product_allergies?: boolean | products_allergiesFindManyArgs
    _count?: boolean | AllergiesCountOutputTypeArgs
  }

  export type allergiesInclude = {
    product_allergies?: boolean | products_allergiesFindManyArgs
    _count?: boolean | AllergiesCountOutputTypeArgs
  }

  export type allergiesGetPayload<
    S extends boolean | null | undefined | allergiesArgs,
    U = keyof S
      > = S extends true
        ? allergies
    : S extends undefined
    ? never
    : S extends allergiesArgs | allergiesFindManyArgs
    ?'include' extends U
    ? allergies  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product_allergies' ? Array < products_allergiesGetPayload<S['include'][P]>>  :
        P extends '_count' ? AllergiesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product_allergies' ? Array < products_allergiesGetPayload<S['select'][P]>>  :
        P extends '_count' ? AllergiesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof allergies ? allergies[P] : never
  } 
    : allergies
  : allergies


  type allergiesCountArgs = Merge<
    Omit<allergiesFindManyArgs, 'select' | 'include'> & {
      select?: AllergiesCountAggregateInputType | true
    }
  >

  export interface allergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Allergies that matches the filter.
     * @param {allergiesFindUniqueArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends allergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, allergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'allergies'> extends True ? CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>> : CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>

    /**
     * Find the first Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesFindFirstArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends allergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, allergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'allergies'> extends True ? CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>> : CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergies.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergiesWithIdOnly = await prisma.allergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends allergiesFindManyArgs>(
      args?: SelectSubset<T, allergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<allergies>>, PrismaPromise<Array<allergiesGetPayload<T>>>>

    /**
     * Create a Allergies.
     * @param {allergiesCreateArgs} args - Arguments to create a Allergies.
     * @example
     * // Create one Allergies
     * const Allergies = await prisma.allergies.create({
     *   data: {
     *     // ... data to create a Allergies
     *   }
     * })
     * 
    **/
    create<T extends allergiesCreateArgs>(
      args: SelectSubset<T, allergiesCreateArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Create many Allergies.
     *     @param {allergiesCreateManyArgs} args - Arguments to create many Allergies.
     *     @example
     *     // Create many Allergies
     *     const allergies = await prisma.allergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends allergiesCreateManyArgs>(
      args?: SelectSubset<T, allergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Allergies.
     * @param {allergiesDeleteArgs} args - Arguments to delete one Allergies.
     * @example
     * // Delete one Allergies
     * const Allergies = await prisma.allergies.delete({
     *   where: {
     *     // ... filter to delete one Allergies
     *   }
     * })
     * 
    **/
    delete<T extends allergiesDeleteArgs>(
      args: SelectSubset<T, allergiesDeleteArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Update one Allergies.
     * @param {allergiesUpdateArgs} args - Arguments to update one Allergies.
     * @example
     * // Update one Allergies
     * const allergies = await prisma.allergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends allergiesUpdateArgs>(
      args: SelectSubset<T, allergiesUpdateArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Delete zero or more Allergies.
     * @param {allergiesDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends allergiesDeleteManyArgs>(
      args?: SelectSubset<T, allergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergies = await prisma.allergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends allergiesUpdateManyArgs>(
      args: SelectSubset<T, allergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Allergies.
     * @param {allergiesUpsertArgs} args - Arguments to update or create a Allergies.
     * @example
     * // Update or create a Allergies
     * const allergies = await prisma.allergies.upsert({
     *   create: {
     *     // ... data to create a Allergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergies we want to update
     *   }
     * })
    **/
    upsert<T extends allergiesUpsertArgs>(
      args: SelectSubset<T, allergiesUpsertArgs>
    ): CheckSelect<T, Prisma__allergiesClient<allergies>, Prisma__allergiesClient<allergiesGetPayload<T>>>

    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergiesCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergies.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends allergiesCountArgs>(
      args?: Subset<T, allergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergiesAggregateArgs>(args: Subset<T, AllergiesAggregateArgs>): PrismaPromise<GetAllergiesAggregateType<T>>

    /**
     * Group by Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergiesGroupByArgs['orderBy'] }
        : { orderBy?: AllergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergiesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for allergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__allergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product_allergies<T extends products_allergiesFindManyArgs = {}>(args?: Subset<T, products_allergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<products_allergies>>, PrismaPromise<Array<products_allergiesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * allergies findUnique
   */
  export type allergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Throw an Error if a allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies findFirst
   */
  export type allergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Throw an Error if a allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for allergies.
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of allergies.
     * 
    **/
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * allergies findMany
   */
  export type allergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Filter, which allergies to fetch.
     * 
    **/
    where?: allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing allergies.
     * 
    **/
    cursor?: allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * allergies create
   */
  export type allergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The data needed to create a allergies.
     * 
    **/
    data: XOR<allergiesCreateInput, allergiesUncheckedCreateInput>
  }


  /**
   * allergies createMany
   */
  export type allergiesCreateManyArgs = {
    /**
     * The data used to create many allergies.
     * 
    **/
    data: Enumerable<allergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * allergies update
   */
  export type allergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The data needed to update a allergies.
     * 
    **/
    data: XOR<allergiesUpdateInput, allergiesUncheckedUpdateInput>
    /**
     * Choose, which allergies to update.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies updateMany
   */
  export type allergiesUpdateManyArgs = {
    /**
     * The data used to update allergies.
     * 
    **/
    data: XOR<allergiesUpdateManyMutationInput, allergiesUncheckedUpdateManyInput>
    /**
     * Filter which allergies to update
     * 
    **/
    where?: allergiesWhereInput
  }


  /**
   * allergies upsert
   */
  export type allergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * The filter to search for the allergies to update in case it exists.
     * 
    **/
    where: allergiesWhereUniqueInput
    /**
     * In case the allergies found by the `where` argument doesn't exist, create a new allergies with this data.
     * 
    **/
    create: XOR<allergiesCreateInput, allergiesUncheckedCreateInput>
    /**
     * In case the allergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<allergiesUpdateInput, allergiesUncheckedUpdateInput>
  }


  /**
   * allergies delete
   */
  export type allergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
    /**
     * Filter which allergies to delete.
     * 
    **/
    where: allergiesWhereUniqueInput
  }


  /**
   * allergies deleteMany
   */
  export type allergiesDeleteManyArgs = {
    /**
     * Filter which allergies to delete
     * 
    **/
    where?: allergiesWhereInput
  }


  /**
   * allergies without action
   */
  export type allergiesArgs = {
    /**
     * Select specific fields to fetch from the allergies
     * 
    **/
    select?: allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: allergiesInclude | null
  }



  /**
   * Model products_allergies
   */


  export type AggregateProducts_allergies = {
    _count: Products_allergiesCountAggregateOutputType | null
    _avg: Products_allergiesAvgAggregateOutputType | null
    _sum: Products_allergiesSumAggregateOutputType | null
    _min: Products_allergiesMinAggregateOutputType | null
    _max: Products_allergiesMaxAggregateOutputType | null
  }

  export type Products_allergiesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type Products_allergiesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type Products_allergiesMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Products_allergiesMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Products_allergiesCountAggregateOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: number
    _all: number
  }


  export type Products_allergiesAvgAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type Products_allergiesSumAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type Products_allergiesMinAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Products_allergiesMaxAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Products_allergiesCountAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
    _all?: true
  }

  export type Products_allergiesAggregateArgs = {
    /**
     * Filter which products_allergies to aggregate.
     * 
    **/
    where?: products_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<products_allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: products_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products_allergies
    **/
    _count?: true | Products_allergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Products_allergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Products_allergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Products_allergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Products_allergiesMaxAggregateInputType
  }

  export type GetProducts_allergiesAggregateType<T extends Products_allergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts_allergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts_allergies[P]>
      : GetScalarType<T[P], AggregateProducts_allergies[P]>
  }




  export type Products_allergiesGroupByArgs = {
    where?: products_allergiesWhereInput
    orderBy?: Enumerable<products_allergiesOrderByWithAggregationInput>
    by: Array<Products_allergiesScalarFieldEnum>
    having?: products_allergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Products_allergiesCountAggregateInputType | true
    _avg?: Products_allergiesAvgAggregateInputType
    _sum?: Products_allergiesSumAggregateInputType
    _min?: Products_allergiesMinAggregateInputType
    _max?: Products_allergiesMaxAggregateInputType
  }


  export type Products_allergiesGroupByOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: Date | null
    _count: Products_allergiesCountAggregateOutputType | null
    _avg: Products_allergiesAvgAggregateOutputType | null
    _sum: Products_allergiesSumAggregateOutputType | null
    _min: Products_allergiesMinAggregateOutputType | null
    _max: Products_allergiesMaxAggregateOutputType | null
  }

  type GetProducts_allergiesGroupByPayload<T extends Products_allergiesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Products_allergiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Products_allergiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Products_allergiesGroupByOutputType[P]>
            : GetScalarType<T[P], Products_allergiesGroupByOutputType[P]>
        }
      >
    >


  export type products_allergiesSelect = {
    id?: boolean
    product_id?: boolean
    allergy_id?: boolean
    created_at?: boolean
    allergie?: boolean | allergiesArgs
    product?: boolean | productsArgs
  }

  export type products_allergiesInclude = {
    allergie?: boolean | allergiesArgs
    product?: boolean | productsArgs
  }

  export type products_allergiesGetPayload<
    S extends boolean | null | undefined | products_allergiesArgs,
    U = keyof S
      > = S extends true
        ? products_allergies
    : S extends undefined
    ? never
    : S extends products_allergiesArgs | products_allergiesFindManyArgs
    ?'include' extends U
    ? products_allergies  & {
    [P in TrueKeys<S['include']>]:
        P extends 'allergie' ? allergiesGetPayload<S['include'][P]> :
        P extends 'product' ? productsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'allergie' ? allergiesGetPayload<S['select'][P]> :
        P extends 'product' ? productsGetPayload<S['select'][P]> :  P extends keyof products_allergies ? products_allergies[P] : never
  } 
    : products_allergies
  : products_allergies


  type products_allergiesCountArgs = Merge<
    Omit<products_allergiesFindManyArgs, 'select' | 'include'> & {
      select?: Products_allergiesCountAggregateInputType | true
    }
  >

  export interface products_allergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Products_allergies that matches the filter.
     * @param {products_allergiesFindUniqueArgs} args - Arguments to find a Products_allergies
     * @example
     * // Get one Products_allergies
     * const products_allergies = await prisma.products_allergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends products_allergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, products_allergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'products_allergies'> extends True ? CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>> : CheckSelect<T, Prisma__products_allergiesClient<products_allergies | null >, Prisma__products_allergiesClient<products_allergiesGetPayload<T> | null >>

    /**
     * Find the first Products_allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_allergiesFindFirstArgs} args - Arguments to find a Products_allergies
     * @example
     * // Get one Products_allergies
     * const products_allergies = await prisma.products_allergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends products_allergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, products_allergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'products_allergies'> extends True ? CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>> : CheckSelect<T, Prisma__products_allergiesClient<products_allergies | null >, Prisma__products_allergiesClient<products_allergiesGetPayload<T> | null >>

    /**
     * Find zero or more Products_allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_allergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products_allergies
     * const products_allergies = await prisma.products_allergies.findMany()
     * 
     * // Get first 10 Products_allergies
     * const products_allergies = await prisma.products_allergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const products_allergiesWithIdOnly = await prisma.products_allergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends products_allergiesFindManyArgs>(
      args?: SelectSubset<T, products_allergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<products_allergies>>, PrismaPromise<Array<products_allergiesGetPayload<T>>>>

    /**
     * Create a Products_allergies.
     * @param {products_allergiesCreateArgs} args - Arguments to create a Products_allergies.
     * @example
     * // Create one Products_allergies
     * const Products_allergies = await prisma.products_allergies.create({
     *   data: {
     *     // ... data to create a Products_allergies
     *   }
     * })
     * 
    **/
    create<T extends products_allergiesCreateArgs>(
      args: SelectSubset<T, products_allergiesCreateArgs>
    ): CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>>

    /**
     * Create many Products_allergies.
     *     @param {products_allergiesCreateManyArgs} args - Arguments to create many Products_allergies.
     *     @example
     *     // Create many Products_allergies
     *     const products_allergies = await prisma.products_allergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends products_allergiesCreateManyArgs>(
      args?: SelectSubset<T, products_allergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products_allergies.
     * @param {products_allergiesDeleteArgs} args - Arguments to delete one Products_allergies.
     * @example
     * // Delete one Products_allergies
     * const Products_allergies = await prisma.products_allergies.delete({
     *   where: {
     *     // ... filter to delete one Products_allergies
     *   }
     * })
     * 
    **/
    delete<T extends products_allergiesDeleteArgs>(
      args: SelectSubset<T, products_allergiesDeleteArgs>
    ): CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>>

    /**
     * Update one Products_allergies.
     * @param {products_allergiesUpdateArgs} args - Arguments to update one Products_allergies.
     * @example
     * // Update one Products_allergies
     * const products_allergies = await prisma.products_allergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends products_allergiesUpdateArgs>(
      args: SelectSubset<T, products_allergiesUpdateArgs>
    ): CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>>

    /**
     * Delete zero or more Products_allergies.
     * @param {products_allergiesDeleteManyArgs} args - Arguments to filter Products_allergies to delete.
     * @example
     * // Delete a few Products_allergies
     * const { count } = await prisma.products_allergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends products_allergiesDeleteManyArgs>(
      args?: SelectSubset<T, products_allergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_allergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products_allergies
     * const products_allergies = await prisma.products_allergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends products_allergiesUpdateManyArgs>(
      args: SelectSubset<T, products_allergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products_allergies.
     * @param {products_allergiesUpsertArgs} args - Arguments to update or create a Products_allergies.
     * @example
     * // Update or create a Products_allergies
     * const products_allergies = await prisma.products_allergies.upsert({
     *   create: {
     *     // ... data to create a Products_allergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products_allergies we want to update
     *   }
     * })
    **/
    upsert<T extends products_allergiesUpsertArgs>(
      args: SelectSubset<T, products_allergiesUpsertArgs>
    ): CheckSelect<T, Prisma__products_allergiesClient<products_allergies>, Prisma__products_allergiesClient<products_allergiesGetPayload<T>>>

    /**
     * Count the number of Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {products_allergiesCountArgs} args - Arguments to filter Products_allergies to count.
     * @example
     * // Count the number of Products_allergies
     * const count = await prisma.products_allergies.count({
     *   where: {
     *     // ... the filter for the Products_allergies we want to count
     *   }
     * })
    **/
    count<T extends products_allergiesCountArgs>(
      args?: Subset<T, products_allergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Products_allergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Products_allergiesAggregateArgs>(args: Subset<T, Products_allergiesAggregateArgs>): PrismaPromise<GetProducts_allergiesAggregateType<T>>

    /**
     * Group by Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Products_allergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Products_allergiesGroupByArgs['orderBy'] }
        : { orderBy?: Products_allergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Products_allergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProducts_allergiesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for products_allergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__products_allergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    allergie<T extends allergiesArgs = {}>(args?: Subset<T, allergiesArgs>): CheckSelect<T, Prisma__allergiesClient<allergies | null >, Prisma__allergiesClient<allergiesGetPayload<T> | null >>;

    product<T extends productsArgs = {}>(args?: Subset<T, productsArgs>): CheckSelect<T, Prisma__productsClient<products | null >, Prisma__productsClient<productsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * products_allergies findUnique
   */
  export type products_allergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * Throw an Error if a products_allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which products_allergies to fetch.
     * 
    **/
    where: products_allergiesWhereUniqueInput
  }


  /**
   * products_allergies findFirst
   */
  export type products_allergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * Throw an Error if a products_allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which products_allergies to fetch.
     * 
    **/
    where?: products_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<products_allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products_allergies.
     * 
    **/
    cursor?: products_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products_allergies.
     * 
    **/
    distinct?: Enumerable<Products_allergiesScalarFieldEnum>
  }


  /**
   * products_allergies findMany
   */
  export type products_allergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * Filter, which products_allergies to fetch.
     * 
    **/
    where?: products_allergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<products_allergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products_allergies.
     * 
    **/
    cursor?: products_allergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products_allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Products_allergiesScalarFieldEnum>
  }


  /**
   * products_allergies create
   */
  export type products_allergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * The data needed to create a products_allergies.
     * 
    **/
    data: XOR<products_allergiesCreateInput, products_allergiesUncheckedCreateInput>
  }


  /**
   * products_allergies createMany
   */
  export type products_allergiesCreateManyArgs = {
    /**
     * The data used to create many products_allergies.
     * 
    **/
    data: Enumerable<products_allergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * products_allergies update
   */
  export type products_allergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * The data needed to update a products_allergies.
     * 
    **/
    data: XOR<products_allergiesUpdateInput, products_allergiesUncheckedUpdateInput>
    /**
     * Choose, which products_allergies to update.
     * 
    **/
    where: products_allergiesWhereUniqueInput
  }


  /**
   * products_allergies updateMany
   */
  export type products_allergiesUpdateManyArgs = {
    /**
     * The data used to update products_allergies.
     * 
    **/
    data: XOR<products_allergiesUpdateManyMutationInput, products_allergiesUncheckedUpdateManyInput>
    /**
     * Filter which products_allergies to update
     * 
    **/
    where?: products_allergiesWhereInput
  }


  /**
   * products_allergies upsert
   */
  export type products_allergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * The filter to search for the products_allergies to update in case it exists.
     * 
    **/
    where: products_allergiesWhereUniqueInput
    /**
     * In case the products_allergies found by the `where` argument doesn't exist, create a new products_allergies with this data.
     * 
    **/
    create: XOR<products_allergiesCreateInput, products_allergiesUncheckedCreateInput>
    /**
     * In case the products_allergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<products_allergiesUpdateInput, products_allergiesUncheckedUpdateInput>
  }


  /**
   * products_allergies delete
   */
  export type products_allergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
    /**
     * Filter which products_allergies to delete.
     * 
    **/
    where: products_allergiesWhereUniqueInput
  }


  /**
   * products_allergies deleteMany
   */
  export type products_allergiesDeleteManyArgs = {
    /**
     * Filter which products_allergies to delete
     * 
    **/
    where?: products_allergiesWhereInput
  }


  /**
   * products_allergies without action
   */
  export type products_allergiesArgs = {
    /**
     * Select specific fields to fetch from the products_allergies
     * 
    **/
    select?: products_allergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: products_allergiesInclude | null
  }



  /**
   * Model nutritions
   */


  export type AggregateNutritions = {
    _count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
  }

  export type NutritionsAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsCountAggregateOutputType = {
    id: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    _all: number
  }


  export type NutritionsAvgAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsSumAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsMinAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsMaxAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsCountAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    _all?: true
  }

  export type NutritionsAggregateArgs = {
    /**
     * Filter which nutritions to aggregate.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned nutritions
    **/
    _count?: true | NutritionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionsMaxAggregateInputType
  }

  export type GetNutritionsAggregateType<T extends NutritionsAggregateArgs> = {
        [P in keyof T & keyof AggregateNutritions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutritions[P]>
      : GetScalarType<T[P], AggregateNutritions[P]>
  }




  export type NutritionsGroupByArgs = {
    where?: nutritionsWhereInput
    orderBy?: Enumerable<nutritionsOrderByWithAggregationInput>
    by: Array<NutritionsScalarFieldEnum>
    having?: nutritionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionsCountAggregateInputType | true
    _avg?: NutritionsAvgAggregateInputType
    _sum?: NutritionsSumAggregateInputType
    _min?: NutritionsMinAggregateInputType
    _max?: NutritionsMaxAggregateInputType
  }


  export type NutritionsGroupByOutputType = {
    id: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    _count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
  }

  type GetNutritionsGroupByPayload<T extends NutritionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NutritionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NutritionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NutritionsGroupByOutputType[P]>
            : GetScalarType<T[P], NutritionsGroupByOutputType[P]>
        }
      >
    >


  export type nutritionsSelect = {
    id?: boolean
    product_id?: boolean
    caffein?: boolean
    fat?: boolean
    sugar?: boolean
    sodium?: boolean
    product?: boolean | productsArgs
  }

  export type nutritionsInclude = {
    product?: boolean | productsArgs
  }

  export type nutritionsGetPayload<
    S extends boolean | null | undefined | nutritionsArgs,
    U = keyof S
      > = S extends true
        ? nutritions
    : S extends undefined
    ? never
    : S extends nutritionsArgs | nutritionsFindManyArgs
    ?'include' extends U
    ? nutritions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? productsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? productsGetPayload<S['select'][P]> :  P extends keyof nutritions ? nutritions[P] : never
  } 
    : nutritions
  : nutritions


  type nutritionsCountArgs = Merge<
    Omit<nutritionsFindManyArgs, 'select' | 'include'> & {
      select?: NutritionsCountAggregateInputType | true
    }
  >

  export interface nutritionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Nutritions that matches the filter.
     * @param {nutritionsFindUniqueArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends nutritionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, nutritionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'nutritions'> extends True ? CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>> : CheckSelect<T, Prisma__nutritionsClient<nutritions | null >, Prisma__nutritionsClient<nutritionsGetPayload<T> | null >>

    /**
     * Find the first Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsFindFirstArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends nutritionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, nutritionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'nutritions'> extends True ? CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>> : CheckSelect<T, Prisma__nutritionsClient<nutritions | null >, Prisma__nutritionsClient<nutritionsGetPayload<T> | null >>

    /**
     * Find zero or more Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nutritions
     * const nutritions = await prisma.nutritions.findMany()
     * 
     * // Get first 10 Nutritions
     * const nutritions = await prisma.nutritions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionsWithIdOnly = await prisma.nutritions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends nutritionsFindManyArgs>(
      args?: SelectSubset<T, nutritionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<nutritions>>, PrismaPromise<Array<nutritionsGetPayload<T>>>>

    /**
     * Create a Nutritions.
     * @param {nutritionsCreateArgs} args - Arguments to create a Nutritions.
     * @example
     * // Create one Nutritions
     * const Nutritions = await prisma.nutritions.create({
     *   data: {
     *     // ... data to create a Nutritions
     *   }
     * })
     * 
    **/
    create<T extends nutritionsCreateArgs>(
      args: SelectSubset<T, nutritionsCreateArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Create many Nutritions.
     *     @param {nutritionsCreateManyArgs} args - Arguments to create many Nutritions.
     *     @example
     *     // Create many Nutritions
     *     const nutritions = await prisma.nutritions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends nutritionsCreateManyArgs>(
      args?: SelectSubset<T, nutritionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Nutritions.
     * @param {nutritionsDeleteArgs} args - Arguments to delete one Nutritions.
     * @example
     * // Delete one Nutritions
     * const Nutritions = await prisma.nutritions.delete({
     *   where: {
     *     // ... filter to delete one Nutritions
     *   }
     * })
     * 
    **/
    delete<T extends nutritionsDeleteArgs>(
      args: SelectSubset<T, nutritionsDeleteArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Update one Nutritions.
     * @param {nutritionsUpdateArgs} args - Arguments to update one Nutritions.
     * @example
     * // Update one Nutritions
     * const nutritions = await prisma.nutritions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends nutritionsUpdateArgs>(
      args: SelectSubset<T, nutritionsUpdateArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Delete zero or more Nutritions.
     * @param {nutritionsDeleteManyArgs} args - Arguments to filter Nutritions to delete.
     * @example
     * // Delete a few Nutritions
     * const { count } = await prisma.nutritions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends nutritionsDeleteManyArgs>(
      args?: SelectSubset<T, nutritionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nutritions
     * const nutritions = await prisma.nutritions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends nutritionsUpdateManyArgs>(
      args: SelectSubset<T, nutritionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Nutritions.
     * @param {nutritionsUpsertArgs} args - Arguments to update or create a Nutritions.
     * @example
     * // Update or create a Nutritions
     * const nutritions = await prisma.nutritions.upsert({
     *   create: {
     *     // ... data to create a Nutritions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nutritions we want to update
     *   }
     * })
    **/
    upsert<T extends nutritionsUpsertArgs>(
      args: SelectSubset<T, nutritionsUpsertArgs>
    ): CheckSelect<T, Prisma__nutritionsClient<nutritions>, Prisma__nutritionsClient<nutritionsGetPayload<T>>>

    /**
     * Count the number of Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nutritionsCountArgs} args - Arguments to filter Nutritions to count.
     * @example
     * // Count the number of Nutritions
     * const count = await prisma.nutritions.count({
     *   where: {
     *     // ... the filter for the Nutritions we want to count
     *   }
     * })
    **/
    count<T extends nutritionsCountArgs>(
      args?: Subset<T, nutritionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionsAggregateArgs>(args: Subset<T, NutritionsAggregateArgs>): PrismaPromise<GetNutritionsAggregateType<T>>

    /**
     * Group by Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionsGroupByArgs['orderBy'] }
        : { orderBy?: NutritionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for nutritions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__nutritionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productsArgs = {}>(args?: Subset<T, productsArgs>): CheckSelect<T, Prisma__productsClient<products | null >, Prisma__productsClient<productsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * nutritions findUnique
   */
  export type nutritionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Throw an Error if a nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions findFirst
   */
  export type nutritionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Throw an Error if a nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nutritions.
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nutritions.
     * 
    **/
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * nutritions findMany
   */
  export type nutritionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Filter, which nutritions to fetch.
     * 
    **/
    where?: nutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<nutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing nutritions.
     * 
    **/
    cursor?: nutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nutritions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * nutritions create
   */
  export type nutritionsCreateArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The data needed to create a nutritions.
     * 
    **/
    data: XOR<nutritionsCreateInput, nutritionsUncheckedCreateInput>
  }


  /**
   * nutritions createMany
   */
  export type nutritionsCreateManyArgs = {
    /**
     * The data used to create many nutritions.
     * 
    **/
    data: Enumerable<nutritionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * nutritions update
   */
  export type nutritionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The data needed to update a nutritions.
     * 
    **/
    data: XOR<nutritionsUpdateInput, nutritionsUncheckedUpdateInput>
    /**
     * Choose, which nutritions to update.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions updateMany
   */
  export type nutritionsUpdateManyArgs = {
    /**
     * The data used to update nutritions.
     * 
    **/
    data: XOR<nutritionsUpdateManyMutationInput, nutritionsUncheckedUpdateManyInput>
    /**
     * Filter which nutritions to update
     * 
    **/
    where?: nutritionsWhereInput
  }


  /**
   * nutritions upsert
   */
  export type nutritionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * The filter to search for the nutritions to update in case it exists.
     * 
    **/
    where: nutritionsWhereUniqueInput
    /**
     * In case the nutritions found by the `where` argument doesn't exist, create a new nutritions with this data.
     * 
    **/
    create: XOR<nutritionsCreateInput, nutritionsUncheckedCreateInput>
    /**
     * In case the nutritions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<nutritionsUpdateInput, nutritionsUncheckedUpdateInput>
  }


  /**
   * nutritions delete
   */
  export type nutritionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
    /**
     * Filter which nutritions to delete.
     * 
    **/
    where: nutritionsWhereUniqueInput
  }


  /**
   * nutritions deleteMany
   */
  export type nutritionsDeleteManyArgs = {
    /**
     * Filter which nutritions to delete
     * 
    **/
    where?: nutritionsWhereInput
  }


  /**
   * nutritions without action
   */
  export type nutritionsArgs = {
    /**
     * Select specific fields to fetch from the nutritions
     * 
    **/
    select?: nutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: nutritionsInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    address: number
    phone_number: number
    policy_agreed: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    username: string | null
    email: string
    password: string
    address: string | null
    phone_number: string | null
    policy_agreed: boolean
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    address?: boolean
    phone_number?: boolean
    policy_agreed?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    korean_name: 'korean_name',
    english_name: 'english_name',
    category_id: 'category_id',
    created_at: 'created_at'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const Product_imagesScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type Product_imagesScalarFieldEnum = (typeof Product_imagesScalarFieldEnum)[keyof typeof Product_imagesScalarFieldEnum]


  export const AllergiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type AllergiesScalarFieldEnum = (typeof AllergiesScalarFieldEnum)[keyof typeof AllergiesScalarFieldEnum]


  export const Products_allergiesScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    allergy_id: 'allergy_id',
    created_at: 'created_at'
  };

  export type Products_allergiesScalarFieldEnum = (typeof Products_allergiesScalarFieldEnum)[keyof typeof Products_allergiesScalarFieldEnum]


  export const NutritionsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    caffein: 'caffein',
    fat: 'fat',
    sugar: 'sugar',
    sodium: 'sodium'
  };

  export type NutritionsScalarFieldEnum = (typeof NutritionsScalarFieldEnum)[keyof typeof NutritionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    address: 'address',
    phone_number: 'phone_number',
    policy_agreed: 'policy_agreed',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type categoriesWhereInput = {
    AND?: Enumerable<categoriesWhereInput>
    OR?: Enumerable<categoriesWhereInput>
    NOT?: Enumerable<categoriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    products?: ProductsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = {
    id?: number
  }

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type productsWhereInput = {
    AND?: Enumerable<productsWhereInput>
    OR?: Enumerable<productsWhereInput>
    NOT?: Enumerable<productsWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    products_allergies?: Products_allergiesListRelationFilter
    product_images?: Product_imagesListRelationFilter
    nutritions?: NutritionsListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    category?: categoriesOrderByWithRelationInput
    products_allergies?: products_allergiesOrderByRelationAggregateInput
    product_images?: product_imagesOrderByRelationAggregateInput
    nutritions?: nutritionsOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = {
    id?: number
    korean_name?: string
  }

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productsScalarWhereWithAggregatesInput>
    OR?: Enumerable<productsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    korean_name?: StringWithAggregatesFilter | string
    english_name?: StringNullableWithAggregatesFilter | string | null
    category_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type product_imagesWhereInput = {
    AND?: Enumerable<product_imagesWhereInput>
    OR?: Enumerable<product_imagesWhereInput>
    NOT?: Enumerable<product_imagesWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type product_imagesOrderByWithRelationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type product_imagesWhereUniqueInput = {
    id?: number
  }

  export type product_imagesOrderByWithAggregationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    _count?: product_imagesCountOrderByAggregateInput
    _avg?: product_imagesAvgOrderByAggregateInput
    _max?: product_imagesMaxOrderByAggregateInput
    _min?: product_imagesMinOrderByAggregateInput
    _sum?: product_imagesSumOrderByAggregateInput
  }

  export type product_imagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_imagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_imagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_imagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image_url?: StringWithAggregatesFilter | string
    product_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type allergiesWhereInput = {
    AND?: Enumerable<allergiesWhereInput>
    OR?: Enumerable<allergiesWhereInput>
    NOT?: Enumerable<allergiesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    product_allergies?: Products_allergiesListRelationFilter
  }

  export type allergiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    product_allergies?: products_allergiesOrderByRelationAggregateInput
  }

  export type allergiesWhereUniqueInput = {
    id?: number
  }

  export type allergiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: allergiesCountOrderByAggregateInput
    _avg?: allergiesAvgOrderByAggregateInput
    _max?: allergiesMaxOrderByAggregateInput
    _min?: allergiesMinOrderByAggregateInput
    _sum?: allergiesSumOrderByAggregateInput
  }

  export type allergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<allergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type products_allergiesWhereInput = {
    AND?: Enumerable<products_allergiesWhereInput>
    OR?: Enumerable<products_allergiesWhereInput>
    NOT?: Enumerable<products_allergiesWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    allergie?: XOR<AllergiesRelationFilter, allergiesWhereInput>
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type products_allergiesOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    allergie?: allergiesOrderByWithRelationInput
    product?: productsOrderByWithRelationInput
  }

  export type products_allergiesWhereUniqueInput = {
    id?: number
  }

  export type products_allergiesOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    _count?: products_allergiesCountOrderByAggregateInput
    _avg?: products_allergiesAvgOrderByAggregateInput
    _max?: products_allergiesMaxOrderByAggregateInput
    _min?: products_allergiesMinOrderByAggregateInput
    _sum?: products_allergiesSumOrderByAggregateInput
  }

  export type products_allergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<products_allergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<products_allergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<products_allergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    allergy_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type nutritionsWhereInput = {
    AND?: Enumerable<nutritionsWhereInput>
    OR?: Enumerable<nutritionsWhereInput>
    NOT?: Enumerable<nutritionsWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    caffein?: IntFilter | number
    fat?: IntFilter | number
    sugar?: IntFilter | number
    sodium?: IntFilter | number
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type nutritionsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type nutritionsWhereUniqueInput = {
    id?: number
  }

  export type nutritionsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    _count?: nutritionsCountOrderByAggregateInput
    _avg?: nutritionsAvgOrderByAggregateInput
    _max?: nutritionsMaxOrderByAggregateInput
    _min?: nutritionsMinOrderByAggregateInput
    _sum?: nutritionsSumOrderByAggregateInput
  }

  export type nutritionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<nutritionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    caffein?: IntWithAggregatesFilter | number
    fat?: IntWithAggregatesFilter | number
    sugar?: IntWithAggregatesFilter | number
    sodium?: IntWithAggregatesFilter | number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone_number?: StringNullableFilter | string | null
    policy_agreed?: BoolFilter | boolean
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    phone_number?: StringNullableWithAggregatesFilter | string | null
    policy_agreed?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type categoriesCreateInput = {
    name: string
    created_at?: Date | string | null
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string | null
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUpdateManyWithoutCategoryInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: productsUncheckedUpdateManyWithoutCategoryInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productsCreateInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    category: categoriesCreateNestedOneWithoutProductsInput
    products_allergies?: products_allergiesCreateNestedManyWithoutProductInput
    product_images?: product_imagesCreateNestedManyWithoutProductInput
    nutritions?: nutritionsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    products_allergies?: products_allergiesUncheckedCreateNestedManyWithoutProductInput
    product_images?: product_imagesUncheckedCreateNestedManyWithoutProductInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsUpdateInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: categoriesUpdateOneRequiredWithoutProductsInput
    products_allergies?: products_allergiesUpdateManyWithoutProductInput
    product_images?: product_imagesUpdateManyWithoutProductInput
    nutritions?: nutritionsUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products_allergies?: products_allergiesUncheckedUpdateManyWithoutProductInput
    product_images?: product_imagesUncheckedUpdateManyWithoutProductInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutProductInput
  }

  export type productsCreateManyInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
  }

  export type productsUpdateManyMutationInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesCreateInput = {
    image_url: string
    created_at?: Date | string | null
    product: productsCreateNestedOneWithoutProduct_imagesInput
  }

  export type product_imagesUncheckedCreateInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string | null
  }

  export type product_imagesUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: productsUpdateOneRequiredWithoutProduct_imagesInput
  }

  export type product_imagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesCreateManyInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string | null
  }

  export type product_imagesUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesCreateInput = {
    name: string
    created_at?: Date | string | null
    product_allergies?: products_allergiesCreateNestedManyWithoutAllergieInput
  }

  export type allergiesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string | null
    product_allergies?: products_allergiesUncheckedCreateNestedManyWithoutAllergieInput
  }

  export type allergiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product_allergies?: products_allergiesUpdateManyWithoutAllergieInput
  }

  export type allergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product_allergies?: products_allergiesUncheckedUpdateManyWithoutAllergieInput
  }

  export type allergiesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type allergiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesCreateInput = {
    created_at?: Date | string | null
    allergie: allergiesCreateNestedOneWithoutProduct_allergiesInput
    product: productsCreateNestedOneWithoutProducts_allergiesInput
  }

  export type products_allergiesUncheckedCreateInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type products_allergiesUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergiesUpdateOneRequiredWithoutProduct_allergiesInput
    product?: productsUpdateOneRequiredWithoutProducts_allergiesInput
  }

  export type products_allergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesCreateManyInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type products_allergiesUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsCreateInput = {
    caffein: number
    fat: number
    sugar: number
    sodium: number
    product: productsCreateNestedOneWithoutNutritionsInput
  }

  export type nutritionsUncheckedCreateInput = {
    id?: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
  }

  export type nutritionsUpdateInput = {
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutNutritionsInput
  }

  export type nutritionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type nutritionsCreateManyInput = {
    id?: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
  }

  export type nutritionsUpdateManyMutationInput = {
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type nutritionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    username?: string | null
    email: string
    password: string
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username?: string | null
    email: string
    password: string
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateManyInput = {
    id?: number
    username?: string | null
    email: string
    password: string
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type Products_allergiesListRelationFilter = {
    every?: products_allergiesWhereInput
    some?: products_allergiesWhereInput
    none?: products_allergiesWhereInput
  }

  export type Product_imagesListRelationFilter = {
    every?: product_imagesWhereInput
    some?: product_imagesWhereInput
    none?: product_imagesWhereInput
  }

  export type NutritionsListRelationFilter = {
    every?: nutritionsWhereInput
    some?: nutritionsWhereInput
    none?: nutritionsWhereInput
  }

  export type products_allergiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_imagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type nutritionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type product_imagesCountOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type product_imagesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type product_imagesMaxOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type product_imagesMinOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type product_imagesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type allergiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type allergiesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type allergiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type allergiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type allergiesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergiesRelationFilter = {
    is?: allergiesWhereInput
    isNot?: allergiesWhereInput
  }

  export type products_allergiesCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type products_allergiesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type products_allergiesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type products_allergiesMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type products_allergiesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type nutritionsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type nutritionsAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type nutritionsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type nutritionsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type nutritionsSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type productsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<productsCreateWithoutCategoryInput>, Enumerable<productsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutCategoryInput>
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: Enumerable<productsWhereUniqueInput>
  }

  export type productsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<productsCreateWithoutCategoryInput>, Enumerable<productsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutCategoryInput>
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: Enumerable<productsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type productsUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<productsCreateWithoutCategoryInput>, Enumerable<productsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<productsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: Enumerable<productsWhereUniqueInput>
    disconnect?: Enumerable<productsWhereUniqueInput>
    delete?: Enumerable<productsWhereUniqueInput>
    connect?: Enumerable<productsWhereUniqueInput>
    update?: Enumerable<productsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<productsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<productsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productsUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<productsCreateWithoutCategoryInput>, Enumerable<productsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<productsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<productsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: Enumerable<productsWhereUniqueInput>
    disconnect?: Enumerable<productsWhereUniqueInput>
    delete?: Enumerable<productsWhereUniqueInput>
    connect?: Enumerable<productsWhereUniqueInput>
    update?: Enumerable<productsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<productsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<productsScalarWhereInput>
  }

  export type categoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    connect?: categoriesWhereUniqueInput
  }

  export type products_allergiesCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutProductInput>, Enumerable<products_allergiesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutProductInput>
    createMany?: products_allergiesCreateManyProductInputEnvelope
    connect?: Enumerable<products_allergiesWhereUniqueInput>
  }

  export type product_imagesCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<product_imagesCreateWithoutProductInput>, Enumerable<product_imagesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<product_imagesCreateOrConnectWithoutProductInput>
    createMany?: product_imagesCreateManyProductInputEnvelope
    connect?: Enumerable<product_imagesWhereUniqueInput>
  }

  export type nutritionsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutProductInput>, Enumerable<nutritionsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutProductInput>
    createMany?: nutritionsCreateManyProductInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
  }

  export type products_allergiesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutProductInput>, Enumerable<products_allergiesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutProductInput>
    createMany?: products_allergiesCreateManyProductInputEnvelope
    connect?: Enumerable<products_allergiesWhereUniqueInput>
  }

  export type product_imagesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<product_imagesCreateWithoutProductInput>, Enumerable<product_imagesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<product_imagesCreateOrConnectWithoutProductInput>
    createMany?: product_imagesCreateManyProductInputEnvelope
    connect?: Enumerable<product_imagesWhereUniqueInput>
  }

  export type nutritionsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutProductInput>, Enumerable<nutritionsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutProductInput>
    createMany?: nutritionsCreateManyProductInputEnvelope
    connect?: Enumerable<nutritionsWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoriesUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    upsert?: categoriesUpsertWithoutProductsInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type products_allergiesUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutProductInput>, Enumerable<products_allergiesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<products_allergiesUpsertWithWhereUniqueWithoutProductInput>
    createMany?: products_allergiesCreateManyProductInputEnvelope
    set?: Enumerable<products_allergiesWhereUniqueInput>
    disconnect?: Enumerable<products_allergiesWhereUniqueInput>
    delete?: Enumerable<products_allergiesWhereUniqueInput>
    connect?: Enumerable<products_allergiesWhereUniqueInput>
    update?: Enumerable<products_allergiesUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<products_allergiesUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<products_allergiesScalarWhereInput>
  }

  export type product_imagesUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<product_imagesCreateWithoutProductInput>, Enumerable<product_imagesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<product_imagesCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<product_imagesUpsertWithWhereUniqueWithoutProductInput>
    createMany?: product_imagesCreateManyProductInputEnvelope
    set?: Enumerable<product_imagesWhereUniqueInput>
    disconnect?: Enumerable<product_imagesWhereUniqueInput>
    delete?: Enumerable<product_imagesWhereUniqueInput>
    connect?: Enumerable<product_imagesWhereUniqueInput>
    update?: Enumerable<product_imagesUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<product_imagesUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<product_imagesScalarWhereInput>
  }

  export type nutritionsUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutProductInput>, Enumerable<nutritionsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<nutritionsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: nutritionsCreateManyProductInputEnvelope
    set?: Enumerable<nutritionsWhereUniqueInput>
    disconnect?: Enumerable<nutritionsWhereUniqueInput>
    delete?: Enumerable<nutritionsWhereUniqueInput>
    connect?: Enumerable<nutritionsWhereUniqueInput>
    update?: Enumerable<nutritionsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<nutritionsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<nutritionsScalarWhereInput>
  }

  export type products_allergiesUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutProductInput>, Enumerable<products_allergiesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<products_allergiesUpsertWithWhereUniqueWithoutProductInput>
    createMany?: products_allergiesCreateManyProductInputEnvelope
    set?: Enumerable<products_allergiesWhereUniqueInput>
    disconnect?: Enumerable<products_allergiesWhereUniqueInput>
    delete?: Enumerable<products_allergiesWhereUniqueInput>
    connect?: Enumerable<products_allergiesWhereUniqueInput>
    update?: Enumerable<products_allergiesUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<products_allergiesUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<products_allergiesScalarWhereInput>
  }

  export type product_imagesUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<product_imagesCreateWithoutProductInput>, Enumerable<product_imagesUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<product_imagesCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<product_imagesUpsertWithWhereUniqueWithoutProductInput>
    createMany?: product_imagesCreateManyProductInputEnvelope
    set?: Enumerable<product_imagesWhereUniqueInput>
    disconnect?: Enumerable<product_imagesWhereUniqueInput>
    delete?: Enumerable<product_imagesWhereUniqueInput>
    connect?: Enumerable<product_imagesWhereUniqueInput>
    update?: Enumerable<product_imagesUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<product_imagesUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<product_imagesScalarWhereInput>
  }

  export type nutritionsUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<nutritionsCreateWithoutProductInput>, Enumerable<nutritionsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<nutritionsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<nutritionsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: nutritionsCreateManyProductInputEnvelope
    set?: Enumerable<nutritionsWhereUniqueInput>
    disconnect?: Enumerable<nutritionsWhereUniqueInput>
    delete?: Enumerable<nutritionsWhereUniqueInput>
    connect?: Enumerable<nutritionsWhereUniqueInput>
    update?: Enumerable<nutritionsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<nutritionsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<nutritionsScalarWhereInput>
  }

  export type productsCreateNestedOneWithoutProduct_imagesInput = {
    create?: XOR<productsCreateWithoutProduct_imagesInput, productsUncheckedCreateWithoutProduct_imagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_imagesInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutProduct_imagesInput = {
    create?: XOR<productsCreateWithoutProduct_imagesInput, productsUncheckedCreateWithoutProduct_imagesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_imagesInput
    upsert?: productsUpsertWithoutProduct_imagesInput
    connect?: productsWhereUniqueInput
    update?: XOR<productsUpdateWithoutProduct_imagesInput, productsUncheckedUpdateWithoutProduct_imagesInput>
  }

  export type products_allergiesCreateNestedManyWithoutAllergieInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutAllergieInput>, Enumerable<products_allergiesUncheckedCreateWithoutAllergieInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutAllergieInput>
    createMany?: products_allergiesCreateManyAllergieInputEnvelope
    connect?: Enumerable<products_allergiesWhereUniqueInput>
  }

  export type products_allergiesUncheckedCreateNestedManyWithoutAllergieInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutAllergieInput>, Enumerable<products_allergiesUncheckedCreateWithoutAllergieInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutAllergieInput>
    createMany?: products_allergiesCreateManyAllergieInputEnvelope
    connect?: Enumerable<products_allergiesWhereUniqueInput>
  }

  export type products_allergiesUpdateManyWithoutAllergieInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutAllergieInput>, Enumerable<products_allergiesUncheckedCreateWithoutAllergieInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutAllergieInput>
    upsert?: Enumerable<products_allergiesUpsertWithWhereUniqueWithoutAllergieInput>
    createMany?: products_allergiesCreateManyAllergieInputEnvelope
    set?: Enumerable<products_allergiesWhereUniqueInput>
    disconnect?: Enumerable<products_allergiesWhereUniqueInput>
    delete?: Enumerable<products_allergiesWhereUniqueInput>
    connect?: Enumerable<products_allergiesWhereUniqueInput>
    update?: Enumerable<products_allergiesUpdateWithWhereUniqueWithoutAllergieInput>
    updateMany?: Enumerable<products_allergiesUpdateManyWithWhereWithoutAllergieInput>
    deleteMany?: Enumerable<products_allergiesScalarWhereInput>
  }

  export type products_allergiesUncheckedUpdateManyWithoutAllergieInput = {
    create?: XOR<Enumerable<products_allergiesCreateWithoutAllergieInput>, Enumerable<products_allergiesUncheckedCreateWithoutAllergieInput>>
    connectOrCreate?: Enumerable<products_allergiesCreateOrConnectWithoutAllergieInput>
    upsert?: Enumerable<products_allergiesUpsertWithWhereUniqueWithoutAllergieInput>
    createMany?: products_allergiesCreateManyAllergieInputEnvelope
    set?: Enumerable<products_allergiesWhereUniqueInput>
    disconnect?: Enumerable<products_allergiesWhereUniqueInput>
    delete?: Enumerable<products_allergiesWhereUniqueInput>
    connect?: Enumerable<products_allergiesWhereUniqueInput>
    update?: Enumerable<products_allergiesUpdateWithWhereUniqueWithoutAllergieInput>
    updateMany?: Enumerable<products_allergiesUpdateManyWithWhereWithoutAllergieInput>
    deleteMany?: Enumerable<products_allergiesScalarWhereInput>
  }

  export type allergiesCreateNestedOneWithoutProduct_allergiesInput = {
    create?: XOR<allergiesCreateWithoutProduct_allergiesInput, allergiesUncheckedCreateWithoutProduct_allergiesInput>
    connectOrCreate?: allergiesCreateOrConnectWithoutProduct_allergiesInput
    connect?: allergiesWhereUniqueInput
  }

  export type productsCreateNestedOneWithoutProducts_allergiesInput = {
    create?: XOR<productsCreateWithoutProducts_allergiesInput, productsUncheckedCreateWithoutProducts_allergiesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProducts_allergiesInput
    connect?: productsWhereUniqueInput
  }

  export type allergiesUpdateOneRequiredWithoutProduct_allergiesInput = {
    create?: XOR<allergiesCreateWithoutProduct_allergiesInput, allergiesUncheckedCreateWithoutProduct_allergiesInput>
    connectOrCreate?: allergiesCreateOrConnectWithoutProduct_allergiesInput
    upsert?: allergiesUpsertWithoutProduct_allergiesInput
    connect?: allergiesWhereUniqueInput
    update?: XOR<allergiesUpdateWithoutProduct_allergiesInput, allergiesUncheckedUpdateWithoutProduct_allergiesInput>
  }

  export type productsUpdateOneRequiredWithoutProducts_allergiesInput = {
    create?: XOR<productsCreateWithoutProducts_allergiesInput, productsUncheckedCreateWithoutProducts_allergiesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProducts_allergiesInput
    upsert?: productsUpsertWithoutProducts_allergiesInput
    connect?: productsWhereUniqueInput
    update?: XOR<productsUpdateWithoutProducts_allergiesInput, productsUncheckedUpdateWithoutProducts_allergiesInput>
  }

  export type productsCreateNestedOneWithoutNutritionsInput = {
    create?: XOR<productsCreateWithoutNutritionsInput, productsUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: productsCreateOrConnectWithoutNutritionsInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutNutritionsInput = {
    create?: XOR<productsCreateWithoutNutritionsInput, productsUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: productsCreateOrConnectWithoutNutritionsInput
    upsert?: productsUpsertWithoutNutritionsInput
    connect?: productsWhereUniqueInput
    update?: XOR<productsUpdateWithoutNutritionsInput, productsUncheckedUpdateWithoutNutritionsInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type productsCreateWithoutCategoryInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    products_allergies?: products_allergiesCreateNestedManyWithoutProductInput
    product_images?: product_imagesCreateNestedManyWithoutProductInput
    nutritions?: nutritionsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCategoryInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    products_allergies?: products_allergiesUncheckedCreateNestedManyWithoutProductInput
    product_images?: product_imagesUncheckedCreateNestedManyWithoutProductInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsCreateManyCategoryInputEnvelope = {
    data: Enumerable<productsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutProductsInput>
  }

  export type productsScalarWhereInput = {
    AND?: Enumerable<productsScalarWhereInput>
    OR?: Enumerable<productsScalarWhereInput>
    NOT?: Enumerable<productsScalarWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type categoriesCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string | null
  }

  export type categoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type categoriesCreateOrConnectWithoutProductsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
  }

  export type products_allergiesCreateWithoutProductInput = {
    created_at?: Date | string | null
    allergie: allergiesCreateNestedOneWithoutProduct_allergiesInput
  }

  export type products_allergiesUncheckedCreateWithoutProductInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type products_allergiesCreateOrConnectWithoutProductInput = {
    where: products_allergiesWhereUniqueInput
    create: XOR<products_allergiesCreateWithoutProductInput, products_allergiesUncheckedCreateWithoutProductInput>
  }

  export type products_allergiesCreateManyProductInputEnvelope = {
    data: Enumerable<products_allergiesCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type product_imagesCreateWithoutProductInput = {
    image_url: string
    created_at?: Date | string | null
  }

  export type product_imagesUncheckedCreateWithoutProductInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type product_imagesCreateOrConnectWithoutProductInput = {
    where: product_imagesWhereUniqueInput
    create: XOR<product_imagesCreateWithoutProductInput, product_imagesUncheckedCreateWithoutProductInput>
  }

  export type product_imagesCreateManyProductInputEnvelope = {
    data: Enumerable<product_imagesCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type nutritionsCreateWithoutProductInput = {
    caffein: number
    fat: number
    sugar: number
    sodium: number
  }

  export type nutritionsUncheckedCreateWithoutProductInput = {
    id?: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
  }

  export type nutritionsCreateOrConnectWithoutProductInput = {
    where: nutritionsWhereUniqueInput
    create: XOR<nutritionsCreateWithoutProductInput, nutritionsUncheckedCreateWithoutProductInput>
  }

  export type nutritionsCreateManyProductInputEnvelope = {
    data: Enumerable<nutritionsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type categoriesUpsertWithoutProductsInput = {
    update: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
  }

  export type categoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type categoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesUpsertWithWhereUniqueWithoutProductInput = {
    where: products_allergiesWhereUniqueInput
    update: XOR<products_allergiesUpdateWithoutProductInput, products_allergiesUncheckedUpdateWithoutProductInput>
    create: XOR<products_allergiesCreateWithoutProductInput, products_allergiesUncheckedCreateWithoutProductInput>
  }

  export type products_allergiesUpdateWithWhereUniqueWithoutProductInput = {
    where: products_allergiesWhereUniqueInput
    data: XOR<products_allergiesUpdateWithoutProductInput, products_allergiesUncheckedUpdateWithoutProductInput>
  }

  export type products_allergiesUpdateManyWithWhereWithoutProductInput = {
    where: products_allergiesScalarWhereInput
    data: XOR<products_allergiesUpdateManyMutationInput, products_allergiesUncheckedUpdateManyWithoutProducts_allergiesInput>
  }

  export type products_allergiesScalarWhereInput = {
    AND?: Enumerable<products_allergiesScalarWhereInput>
    OR?: Enumerable<products_allergiesScalarWhereInput>
    NOT?: Enumerable<products_allergiesScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type product_imagesUpsertWithWhereUniqueWithoutProductInput = {
    where: product_imagesWhereUniqueInput
    update: XOR<product_imagesUpdateWithoutProductInput, product_imagesUncheckedUpdateWithoutProductInput>
    create: XOR<product_imagesCreateWithoutProductInput, product_imagesUncheckedCreateWithoutProductInput>
  }

  export type product_imagesUpdateWithWhereUniqueWithoutProductInput = {
    where: product_imagesWhereUniqueInput
    data: XOR<product_imagesUpdateWithoutProductInput, product_imagesUncheckedUpdateWithoutProductInput>
  }

  export type product_imagesUpdateManyWithWhereWithoutProductInput = {
    where: product_imagesScalarWhereInput
    data: XOR<product_imagesUpdateManyMutationInput, product_imagesUncheckedUpdateManyWithoutProduct_imagesInput>
  }

  export type product_imagesScalarWhereInput = {
    AND?: Enumerable<product_imagesScalarWhereInput>
    OR?: Enumerable<product_imagesScalarWhereInput>
    NOT?: Enumerable<product_imagesScalarWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type nutritionsUpsertWithWhereUniqueWithoutProductInput = {
    where: nutritionsWhereUniqueInput
    update: XOR<nutritionsUpdateWithoutProductInput, nutritionsUncheckedUpdateWithoutProductInput>
    create: XOR<nutritionsCreateWithoutProductInput, nutritionsUncheckedCreateWithoutProductInput>
  }

  export type nutritionsUpdateWithWhereUniqueWithoutProductInput = {
    where: nutritionsWhereUniqueInput
    data: XOR<nutritionsUpdateWithoutProductInput, nutritionsUncheckedUpdateWithoutProductInput>
  }

  export type nutritionsUpdateManyWithWhereWithoutProductInput = {
    where: nutritionsScalarWhereInput
    data: XOR<nutritionsUpdateManyMutationInput, nutritionsUncheckedUpdateManyWithoutNutritionsInput>
  }

  export type nutritionsScalarWhereInput = {
    AND?: Enumerable<nutritionsScalarWhereInput>
    OR?: Enumerable<nutritionsScalarWhereInput>
    NOT?: Enumerable<nutritionsScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    caffein?: IntFilter | number
    fat?: IntFilter | number
    sugar?: IntFilter | number
    sodium?: IntFilter | number
  }

  export type productsCreateWithoutProduct_imagesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    category: categoriesCreateNestedOneWithoutProductsInput
    products_allergies?: products_allergiesCreateNestedManyWithoutProductInput
    nutritions?: nutritionsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutProduct_imagesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    products_allergies?: products_allergiesUncheckedCreateNestedManyWithoutProductInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutProduct_imagesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_imagesInput, productsUncheckedCreateWithoutProduct_imagesInput>
  }

  export type productsUpsertWithoutProduct_imagesInput = {
    update: XOR<productsUpdateWithoutProduct_imagesInput, productsUncheckedUpdateWithoutProduct_imagesInput>
    create: XOR<productsCreateWithoutProduct_imagesInput, productsUncheckedCreateWithoutProduct_imagesInput>
  }

  export type productsUpdateWithoutProduct_imagesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: categoriesUpdateOneRequiredWithoutProductsInput
    products_allergies?: products_allergiesUpdateManyWithoutProductInput
    nutritions?: nutritionsUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateWithoutProduct_imagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products_allergies?: products_allergiesUncheckedUpdateManyWithoutProductInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutProductInput
  }

  export type products_allergiesCreateWithoutAllergieInput = {
    created_at?: Date | string | null
    product: productsCreateNestedOneWithoutProducts_allergiesInput
  }

  export type products_allergiesUncheckedCreateWithoutAllergieInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type products_allergiesCreateOrConnectWithoutAllergieInput = {
    where: products_allergiesWhereUniqueInput
    create: XOR<products_allergiesCreateWithoutAllergieInput, products_allergiesUncheckedCreateWithoutAllergieInput>
  }

  export type products_allergiesCreateManyAllergieInputEnvelope = {
    data: Enumerable<products_allergiesCreateManyAllergieInput>
    skipDuplicates?: boolean
  }

  export type products_allergiesUpsertWithWhereUniqueWithoutAllergieInput = {
    where: products_allergiesWhereUniqueInput
    update: XOR<products_allergiesUpdateWithoutAllergieInput, products_allergiesUncheckedUpdateWithoutAllergieInput>
    create: XOR<products_allergiesCreateWithoutAllergieInput, products_allergiesUncheckedCreateWithoutAllergieInput>
  }

  export type products_allergiesUpdateWithWhereUniqueWithoutAllergieInput = {
    where: products_allergiesWhereUniqueInput
    data: XOR<products_allergiesUpdateWithoutAllergieInput, products_allergiesUncheckedUpdateWithoutAllergieInput>
  }

  export type products_allergiesUpdateManyWithWhereWithoutAllergieInput = {
    where: products_allergiesScalarWhereInput
    data: XOR<products_allergiesUpdateManyMutationInput, products_allergiesUncheckedUpdateManyWithoutProduct_allergiesInput>
  }

  export type allergiesCreateWithoutProduct_allergiesInput = {
    name: string
    created_at?: Date | string | null
  }

  export type allergiesUncheckedCreateWithoutProduct_allergiesInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type allergiesCreateOrConnectWithoutProduct_allergiesInput = {
    where: allergiesWhereUniqueInput
    create: XOR<allergiesCreateWithoutProduct_allergiesInput, allergiesUncheckedCreateWithoutProduct_allergiesInput>
  }

  export type productsCreateWithoutProducts_allergiesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    category: categoriesCreateNestedOneWithoutProductsInput
    product_images?: product_imagesCreateNestedManyWithoutProductInput
    nutritions?: nutritionsCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutProducts_allergiesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    product_images?: product_imagesUncheckedCreateNestedManyWithoutProductInput
    nutritions?: nutritionsUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutProducts_allergiesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProducts_allergiesInput, productsUncheckedCreateWithoutProducts_allergiesInput>
  }

  export type allergiesUpsertWithoutProduct_allergiesInput = {
    update: XOR<allergiesUpdateWithoutProduct_allergiesInput, allergiesUncheckedUpdateWithoutProduct_allergiesInput>
    create: XOR<allergiesCreateWithoutProduct_allergiesInput, allergiesUncheckedCreateWithoutProduct_allergiesInput>
  }

  export type allergiesUpdateWithoutProduct_allergiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergiesUncheckedUpdateWithoutProduct_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type productsUpsertWithoutProducts_allergiesInput = {
    update: XOR<productsUpdateWithoutProducts_allergiesInput, productsUncheckedUpdateWithoutProducts_allergiesInput>
    create: XOR<productsCreateWithoutProducts_allergiesInput, productsUncheckedCreateWithoutProducts_allergiesInput>
  }

  export type productsUpdateWithoutProducts_allergiesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: categoriesUpdateOneRequiredWithoutProductsInput
    product_images?: product_imagesUpdateManyWithoutProductInput
    nutritions?: nutritionsUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateWithoutProducts_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product_images?: product_imagesUncheckedUpdateManyWithoutProductInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutProductInput
  }

  export type productsCreateWithoutNutritionsInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    category: categoriesCreateNestedOneWithoutProductsInput
    products_allergies?: products_allergiesCreateNestedManyWithoutProductInput
    product_images?: product_imagesCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutNutritionsInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    products_allergies?: products_allergiesUncheckedCreateNestedManyWithoutProductInput
    product_images?: product_imagesUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutNutritionsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutNutritionsInput, productsUncheckedCreateWithoutNutritionsInput>
  }

  export type productsUpsertWithoutNutritionsInput = {
    update: XOR<productsUpdateWithoutNutritionsInput, productsUncheckedUpdateWithoutNutritionsInput>
    create: XOR<productsCreateWithoutNutritionsInput, productsUncheckedCreateWithoutNutritionsInput>
  }

  export type productsUpdateWithoutNutritionsInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: categoriesUpdateOneRequiredWithoutProductsInput
    products_allergies?: products_allergiesUpdateManyWithoutProductInput
    product_images?: product_imagesUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateWithoutNutritionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products_allergies?: products_allergiesUncheckedUpdateManyWithoutProductInput
    product_images?: product_imagesUncheckedUpdateManyWithoutProductInput
  }

  export type productsCreateManyCategoryInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
  }

  export type productsUpdateWithoutCategoryInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products_allergies?: products_allergiesUpdateManyWithoutProductInput
    product_images?: product_imagesUpdateManyWithoutProductInput
    nutritions?: nutritionsUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products_allergies?: products_allergiesUncheckedUpdateManyWithoutProductInput
    product_images?: product_imagesUncheckedUpdateManyWithoutProductInput
    nutritions?: nutritionsUncheckedUpdateManyWithoutProductInput
  }

  export type productsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesCreateManyProductInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type product_imagesCreateManyProductInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type nutritionsCreateManyProductInput = {
    id?: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
  }

  export type products_allergiesUpdateWithoutProductInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergiesUpdateOneRequiredWithoutProduct_allergiesInput
  }

  export type products_allergiesUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesUncheckedUpdateManyWithoutProducts_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesUpdateWithoutProductInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type product_imagesUncheckedUpdateManyWithoutProduct_imagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type nutritionsUpdateWithoutProductInput = {
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type nutritionsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type nutritionsUncheckedUpdateManyWithoutNutritionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    caffein?: IntFieldUpdateOperationsInput | number
    fat?: IntFieldUpdateOperationsInput | number
    sugar?: IntFieldUpdateOperationsInput | number
    sodium?: IntFieldUpdateOperationsInput | number
  }

  export type products_allergiesCreateManyAllergieInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type products_allergiesUpdateWithoutAllergieInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: productsUpdateOneRequiredWithoutProducts_allergiesInput
  }

  export type products_allergiesUncheckedUpdateWithoutAllergieInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type products_allergiesUncheckedUpdateManyWithoutProduct_allergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}